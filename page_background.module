<?php

function page_background_menu(){
	$items=array();

	$items['admin/config/page_background'] = array(
	    'title' => t('Page Backgrounds'),
	    'description' => t('Page Backgrounds'),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('page_background_admin_form'),
		'access callback'=>'_page_background_check_access',
	  	'access arguments' => array('administer page_background'),
	);

	$items['admin/config/page_background/settings'] = array(
	    'title' => t('Page Backgrounds Settings'),
	    'description' => t('Page Backgrounds Settings'),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('page_background_settings_form'),
		'access callback'=>'_page_background_check_access',
	  	'access arguments' => array('administer page_background'),
	);
	
	return $items;
}


/**
 * Implements hook_permission().
 */
function page_background_permission() {
	return array(
	    'administer page_background' =>  array(
			'title' => t('Administer Page Background'),
			'description' => t('Perform administration tasks for Page Background.'),
		),
	);
}

function _page_background_check_access($access){
	global $user;
	if($user->uid==1) return true;
	if(!is_array($access)) $access=array($access);
	foreach($access as $string)
	if( user_access($string,$user) ) return true;

	return false;
}


/**
 * Implements hook_theme().
 */
function page_background_theme($existing, $type, $theme, $path) {
	return array(
		'page_background_admin_form' => array(
			'render element' => 'form',
		),
	);
}


function page_background_addmore_uploads_callback($form, $form_state) {
  return $form['page_backgrounds']['uploads_fieldset']['page_backgrounds_uploadfile'.$form['page_backgrounds']['page_backgrounds_num_uploads']['#value']];
}





/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Alter the taxonomy term forms.
 */
function page_background_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
	$term = (object)$form['#term'];
	$form['page_backgrounds'] = array('#type'=>'fieldset','#title'=>t('Page Backgrounds'),'#collapsible'=>true,'#collapsed'=>true);
	$form['page_backgrounds']['#group'] = 'additional_settings';
	$form['page_backgrounds']['#weight'] = 9999;

	if(isset($term->tid)){
		$query = db_select('url_background_images','bg')->fields('bg')->condition('path','taxonomy/term/'.$term->tid,'=')->orderBy('created');
		$result=$query->execute()->fetchAll();
		if(count($result)>0){
			$form['page_backgrounds']['existing']=array('#markup'=>'<strong>'.t('Mark for deletion of an existing background.').'</strong>');
		}
		foreach($result as $bkg){
		
			$file=file_load($bkg->fid);
			$themed_image=array(
					'path'=>$file->uri,
					'style_name'=>'thumbnail',
			);
		
			$form['page_backgrounds']['page_background_bkg_'.$bkg->bid]=array(
					'#type'=>'checkbox',
					'#title'=>theme('image_style',$themed_image),
			);
		
		}
		
		$max_upload = (int)(ini_get('upload_max_filesize'));
		$max_post = (int)(ini_get('post_max_size'));
		$memory_limit = (int)(ini_get('memory_limit'));
		$upload_mb = min($max_upload, $max_post, $memory_limit);
		
		$extensions=explode(' ','jpg jpeg png');
		foreach($extensions as &$ext) $ext='.'.trim($ext);
		
		$num_uploads = !empty($form_state['values']['page_backgrounds_num_uploads']) ? $form_state['values']['page_backgrounds_num_uploads']+1 : 1;
		
		$form['page_backgrounds']['page_backgrounds_num_uploads']=array('#type'=>'value','#value'=>$num_uploads);
		$form['page_backgrounds']['uploads_fieldset'] = array(
				'#title' => t('Upload New Background'),
				'#type' => 'container',
				'#id'=>'page_background-uploads-div',
		);
		$form['page_backgrounds']['uploads_fieldset']['new-title']=array('#markup'=>'<strong>'.t('Add new backgrounds.').'</strong>');
		for ($i = 1; $i <= $num_uploads; $i++) {
			$form['page_backgrounds']['uploads_fieldset']["page_backgrounds_uploadfile$i"] = array(
					'#type'=>'managed_file',
					'#upload_validators' => array(
							'file_validate_extensions' => array('jpg jpeg png'),
							// Pass the maximum file size in bytes
							'file_validate_size' => array($upload_mb * 1024 * 1024),
					),
					'#upload_location'=>'public://page_backgrounds/',
					'#description'=>t('extensions allowed: !extension_list , max file size: !maxfilesize MB',Array('!extension_list'=>implode(' ',$extensions),'!maxfilesize'=>$upload_mb)),
			);
		}
		
		$form['page_backgrounds']['add-new-file']=array(
				'#type'=>'button',
				'#value'=>t('Add more'),
				'#ajax' => array(
						'callback' => 'page_background_addmore_uploads_callback',
						'wrapper' => 'page_background-uploads-div',
						'method' => 'append',
						'effect' => 'fade',
						'progress' => array('type' => 'none'),
				),
		);
		
	}else{
		$form['page_backgrounds']['alert']=array('#markup'=>t('Page backgrounds can be added only to existing terms.'));
	}
	$form['#validate'][]='page_background_form_taxonomy_form_term_validate';
	$form['#submit'][]='page_background_form_taxonomy_form_term_submit';
}

function page_background_form_taxonomy_form_term_validate($form, &$form_state){
	foreach($form_state['values'] as $key=>$value){
		if( preg_match('/^page_backgrounds_uploadfile[0-9]+$/i',$key) ){
		}
	}
}

function page_background_form_taxonomy_form_term_submit($form, &$form_state){
	global $user;
	if(
		( isset($form_state['values']['op']) && $form_state['values']['op']==t('Save') ) || 
		( isset($form_state['values']['save_translate']) && $form_state['values']['save_translate']==t('Save and translate') ) 
	){
		foreach($form_state['values'] as $key=>$value){
			if( preg_match('/^page_backgrounds_uploadfile[0-9]+$/i',$key) ){
				if( ($file = file_load($form_state['values'][$key])) !== false ){
					$file->status = FILE_STATUS_PERMANENT;
					$file->uid = $user->uid;
					file_save($file);
	
					db_insert('url_background_images')
					->fields(array(
					'path'=>'taxonomy/term/'.$form_state['values']['tid'],
					'fid'=>$file->fid,
					'weight'=>0,
					'created'=>time(),
					))->execute();
				}
			}
		}

		//trovo checkbox selezionati per eliminazione
		$bids=array();
		foreach($form_state['values'] as $key=>$elem){
			if(stripos($key,'page_background_bkg_')===0 && !empty($elem)){
				$bids[]=preg_replace("/^page_background_bkg_/i","",$key);
			}
		}
		$numdeleted = 0;
		if(count($bids)>0){
			$numdeleted = db_delete('url_background_images')->condition('bid',$bids,'IN')->execute();
		}
	}
}

function page_background_taxonomy_term_delete($term){
	$numdeleted = db_delete('url_background_images')->condition('path','taxonomy/term/'.$term->tid,'=')->execute();
}







/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Alter the node forms.
 */
function page_background_form_node_form_alter(&$form, &$form_state, $form_id) {
	// Add the Location fields on the node edit form.
	$node = $form['#node'];
	$form['page_backgrounds'] = array('#type'=>'fieldset','#title'=>t('Page Backgrounds'));
	$form['page_backgrounds']['#group'] = 'additional_settings';
		
	if(isset($node->nid)){
		$query = db_select('url_background_images','bg')->fields('bg')->condition('path','node/'.$node->nid,'=')->orderBy('created');
		$result=$query->execute()->fetchAll();
		if(count($result)>0){
			$form['page_backgrounds']['existing']=array('#markup'=>'<strong>'.t('Mark for deletion of an existing background.').'</strong>');
		}
		foreach($result as $bkg){
		
			$file=file_load($bkg->fid);
			$themed_image=array(
					'path'=>$file->uri,
					'style_name'=>'thumbnail',
			);
		
			$form['page_backgrounds']['page_background_bkg_'.$bkg->bid]=array(
					'#type'=>'checkbox',
					'#title'=>theme('image_style',$themed_image),
			);
		
		}
		
		$max_upload = (int)(ini_get('upload_max_filesize'));
		$max_post = (int)(ini_get('post_max_size'));
		$memory_limit = (int)(ini_get('memory_limit'));
		$upload_mb = min($max_upload, $max_post, $memory_limit);
		
		$extensions=explode(' ','jpg jpeg png');
		foreach($extensions as &$ext) $ext='.'.trim($ext);
		
		$num_uploads = !empty($form_state['values']['page_backgrounds_num_uploads']) ? $form_state['values']['page_backgrounds_num_uploads']+1 : 1;
		
		$form['page_backgrounds']['page_backgrounds_num_uploads']=array('#type'=>'value','#value'=>$num_uploads);
		$form['page_backgrounds']['uploads_fieldset'] = array(
				'#title' => t('Upload New Background'),
				// The prefix/suffix provide the div that we're replacing, named by
				// #ajax['wrapper'] below.
				'#type' => 'container',
				'#id'=>'page_background-uploads-div',
		);
		$form['page_backgrounds']['uploads_fieldset']['new-title']=array('#markup'=>'<strong>'.t('Add new backgrounds.').'</strong>');
		for ($i = 1; $i <= $num_uploads; $i++) {
			$form['page_backgrounds']['uploads_fieldset']["page_backgrounds_uploadfile$i"] = array(
					'#type'=>'managed_file',
					'#upload_validators' => array(
							'file_validate_extensions' => array('jpg jpeg png'),
							// Pass the maximum file size in bytes
							'file_validate_size' => array($upload_mb * 1024 * 1024),
					),
					'#upload_location'=>'public://page_backgrounds/',
					'#description'=>t('extensions allowed: !extension_list , max file size: !maxfilesize MB',Array('!extension_list'=>implode(' ',$extensions),'!maxfilesize'=>$upload_mb)),
			);
		}
		
		$form['page_backgrounds']['add-new-file']=array(
				'#type'=>'button',
				'#value'=>t('Add more'),
				'#ajax' => array(
						'callback' => 'page_background_addmore_uploads_callback',
						'wrapper' => 'page_background-uploads-div',
						//'method' defaults to replaceWith, but valid values also include
						// append, prepend, before and after.
						// 'method' => 'replaceWith',
						'method' => 'append',
						// 'effect' defaults to none. Other valid values are 'fade' and 'slide'.
						'effect' => 'fade',
						// 'speed' defaults to 'slow'. You can also use 'fast'
						// or a number of milliseconds for the animation to last.
						// 'speed' => 'slow',
						// Don't show any throbber...
						'progress' => array('type' => 'none'),
				),
		);
		
	}else{
		$form['page_backgrounds']['alert']=array('#markup'=>t('Page backgrounds can be added only to existing nodes.'));
	}
	$form['#validate'][]='page_background_form_node_form_validate';
}

function page_background_form_node_form_validate($form, &$form_state){
	foreach($form_state['values'] as $key=>$value){
		if( preg_match('/^page_backgrounds_uploadfile[0-9]+$/i',$key) ){
		}
	}
}

function page_background_node_submit($node, $form, &$form_state){
	global $user;
	if($form_state['values']['op']==t('Save')){
		foreach($form_state['values'] as $key=>$value){
			if( preg_match('/^page_backgrounds_uploadfile[0-9]+$/i',$key) ){
				if( ($file = file_load($form_state['values'][$key])) !== false ){
					$file->status = FILE_STATUS_PERMANENT;
					$file->uid = $user->uid;
					file_save($file);
	
					db_insert('url_background_images')
					->fields(array(
					'path'=>'node/'.$form_state['values']['nid'],
					'fid'=>$file->fid,
					'weight'=>0,
					'created'=>time(),
					))->execute();
				}
			}
		}
	
		//trovo checkbox selezionati per eliminazione
		$bids=array();
		foreach($form_state['values'] as $key=>$elem){
			if(stripos($key,'page_background_bkg_')===0 && !empty($elem)){
				$bids[]=preg_replace("/^page_background_bkg_/i","",$key);
			}
		}
		$numdeleted = 0;
		if(count($bids)>0){
			$numdeleted = db_delete('url_background_images')->condition('bid',$bids,'IN')->execute();
		}
	}
}

function page_background_node_delete($node){
	$numdeleted = db_delete('url_background_images')->condition('path','node/'.$node->nid,'=')->execute();
}

function page_background_admin_form($form,&$form_state){
	global $user;
	$query = db_select('url_background_images','bg')->fields('bg')->orderBy('weight')->orderBy('created');
	$query->extend('PagerDefault')->limit(50);
	$result=$query->execute()->fetchAll();

	$form['#validate'][]='page_background_admin_form_validate';
	foreach($result as $bkg){
		$form['bkg_'.$bkg->bid]=array(
			'#type'=>'checkbox',
			'#infos'=>serialize($bkg),
		);
		$form['weight_'.$bkg->bid]=array(
				'#type'=>'textfield',
				'#default_value'=>$bkg->weight,
				'#attributes'=>Array('class'=> Array('my-elements-weight')),
		);
	}
	if($result) {
		$form['delete_selected']=array('#type'=>'submit','#value'=>t('Delete Selected'));
		$form['update_weight']=array('#type'=>'submit','#value'=>t('Save Changes'));
	}

	$form['addfile'] = array('#type'=>'fieldset','#title'=>t('Upload a new file'));

	$max_upload = (int)(ini_get('upload_max_filesize'));
	$max_post = (int)(ini_get('post_max_size'));
	$memory_limit = (int)(ini_get('memory_limit'));
	$upload_mb = min($max_upload, $max_post, $memory_limit);

	$extensions=explode(' ','jpg jpeg png');
	foreach($extensions as &$ext) $ext='.'.trim($ext);

	$form['uid']=array('#type'=>'hidden','#value'=>$user->uid);

	$form['addfile']['path']=array('#type'=>'textfield','#title'=>t('Path'));
	$form['addfile']['uploadfile']=array(
		'#type'=>'managed_file',
		'#title'=>t('Upload New Background'),
		'#upload_validators' => array(
		'file_validate_extensions' => array('jpg jpeg png'),
		// Pass the maximum file size in bytes
		    'file_validate_size' => array($upload_mb * 1024 * 1024),
		),
		'#upload_location'=>'public://page_backgrounds/',
		'#description'=>t('extensions allowed: !extension_list , max file size: !maxfilesize MB',Array('!extension_list'=>implode(' ',$extensions),'!maxfilesize'=>$upload_mb)),
	);

	$form['addfile']['default']=array('#type'=>'checkbox','#title'=>t('Add to defaults'));
	$form['addfile']['submit']=array('#type'=>'submit','#value'=>t('Submit'));
	return $form;
}

function page_background_admin_form_validate($form,&$form_state){
	if($form_state['values']['op']==t('Submit')){
		if( ($file = file_load($form_state['values']['uploadfile'])) === false ){
			form_set_error('uploadfile',t('A background image is necessary'));
		}
		if($form_state['values']['default']!=1 && (trim($form_state['values']['path'])=='' || !drupal_valid_path( drupal_get_normal_path( $form_state['values']['path'] ) ,true)) ) {
			form_set_error('path',t('Invalid path'));
		}
	}elseif($form_state['values']['op']==t('Delete Selected')){
		$count=0;
		foreach($form_state['values'] as $key=>$elem){
			if(stripos($key,'bkg_')===0 && !empty($elem)){
				$count++;
			}
		}
		if($count==0){
			form_set_error('',t('No image selected for deletion.'));
		}
	}
}

function page_background_admin_form_submit($form,&$form_state){
	if($form_state['values']['op']==t('Submit')){
		if( ($file = file_load($form_state['values']['uploadfile'])) !== false ){
			$file->status = FILE_STATUS_PERMANENT;
			$file->uid = $form_state['values']['uid'];
			file_save($file);

			if($form_state['values']['default']==1) $form_state['values']['path']=null;
			else{
				$form_state['values']['path'] = drupal_get_normal_path($form_state['values']['path']);
			}
			
			db_insert('url_background_images')
			->fields(array(
				'path'=>$form_state['values']['path'],
				'fid'=>$file->fid,
				'weight'=>0,
				'created'=>time(),
			))->execute();

			drupal_set_message(t('File uploaded succesfully'));
		}

	}elseif($form_state['values']['op']==t('Delete Selected')){
		$bids=array();
		foreach($form_state['values'] as $key=>$elem){
			if(stripos($key,'bkg_')===0 && !empty($elem)){
				$bids[]=preg_replace("/^bkg_/i","",$key);
			}
		}
		$numdeleted = 0;
		if(count($bids)>0){
			$numdeleted = db_delete('url_background_images')->condition('bid',$bids,'IN')->execute();
		}

		drupal_set_message(t('!numdeleted files deleted',array('!numdeleted'=>$numdeleted)));
	}elseif($form_state['values']['op']==t('Save Changes')){
		$bids=array();
		foreach($form_state['values'] as $key=>$elem){
			if(stripos($key,'weight_')===0){
				$bid=preg_replace("/^weight_/i","",$key);
				$query=db_update('url_background_images')->fields(array(
					'weight'=>$elem,
				))->condition('bid',$bid);
				$query->execute();
			}
		}
		drupal_set_message(t('Changes saved.'));
	}
	drupal_goto('admin/config/page_background');
}

function theme_page_background_admin_form($variables){
	$form=$variables['form'];
	drupal_add_tabledrag('page-background-table', 'order', 'sibling', 'my-elements-weight');
	$out="";
	$rows=array();
	$header=array('',t('Path'),t('Url'),t('Thumb'),t('Weight'));
	foreach($form as $key=>&$elem){
		if(stripos($key,'bkg_')===0){
			$infos=unserialize($elem['#infos']);unset($elem['#infos']);
			$file=file_load($infos->fid);
			$themed_image=array(
				'path'=>$file->uri,
				'style_name'=>'thumbnail',
			);
			$row = array(
				array('data'	=>	render($elem)),
				array('data'	=>	$infos->path==null?t('Default'):check_plain($infos->path)),
				array('data'	=>	url( file_create_url($file->uri), array('absolute'=>true) )),
				array('data'	=>	theme('image_style',$themed_image)),
				array('data'	=> render($form[str_replace("bkg_","weight_",$key)]))
			);
			$rows[]=array(
					'data'=>$row,
					'class' => array('draggable'),
			);
		}
	}
	$out.=theme('table',array('header'=>$header,'rows'=>$rows, 'attributes' => array('id' => 'page-background-table'))).render($form['update_weight']).'&nbsp;'.render($form['delete_selected']).'<br /><br />';
	return $out.=drupal_render_children($form);
}



function page_background_settings_form($form,&$form_state){

	$form['page_background_container_width']=array(
		'#type'=>'textfield',
		'#title'=>t('Container width'),
		'#default_value'=>variable_get('page_background_container_width',''),
	);

	$form['page_background_container_height']=array(
		'#type'=>'textfield',
		'#title'=>t('Container height'),
		'#default_value'=>variable_get('page_background_container_height',''),
	);

	$form['page_background_animation_effect']=array(
		'#type'=>'select',
		'#options'=>array(
			'none'			=>	'none',
			'blindX'		=>	'blindX',
			'blindY'		=>	'blindY',
			'blindZ'		=>	'blindZ',
			'cover'			=>	'cover',
			'curtainX'		=>	'curtainX',
			'curtainY'		=>	'curtainY',
			'fade'			=>	'fade',
			'fadeZoom'		=>	'fadeZoom',
			'growX'			=>	'growX',
			'growY'			=>	'growY',
			'scrollUp'		=>	'scrollUp',
			'scrollDown'	=>	'scrollDown',
			'scrollLeft'	=>	'scrollLeft',
			'scrollRight'	=>	'scrollRight',
			'scrollHorz'	=>	'scrollHorz',
			'scrollVert'	=>	'scrollVert',
			'shuffle'		=>	'shuffle',
			'slideX'		=>	'slideX',
			'slideY'		=>	'slideY',
			'toss'			=>	'toss',
			'turnUp'		=>	'turnUp',
			'turnDown'		=>	'turnDown',
			'turnLeft'		=>	'turnLeft',
			'turnRight'		=>	'turnRight',
			'uncover'		=>	'uncover',
			'wipe'			=>	'wipe',
			'zoom'			=>	'zoom',
		),
		'#title'=>t('Animation effect'),
		'#default_value'=>variable_get('page_background_animation_effect','scrollHorz'),
	);

	$form['page_background_slides_type']=array(
			'#type'=>'select',
			'#options'=>array(
					'styled_divs'	=>	t('as divs'),
					'images'			=> t('as images'),
			),
			'#title'=>t('Slides rendered'),
			'#default_value'=>variable_get('page_background_slides_type','styled_divs'),
	);

	$form['page_background_animation_timeout']=array(
		'#type'=>'textfield',
		'#title'=>t('Animation timeout'),
		'#default_value'=>variable_get('page_background_animation_timeout',5000),
	);

	$form['page_background_animation_speed']=array(
			'#type'=>'textfield',
			'#title'=>t('Animation speed'),
			'#default_value'=>variable_get('page_background_animation_speed',1000),
	);
		
	$form['page_background_delay']=array(
			'#type'=>'textfield',
			'#title'=>t('Animation initial delay'),
			'#default_value'=>variable_get('page_background_delay',0),
	);
	
	$form['page_background_fit']=array(
			'#type'=>'checkbox',
			'#title'=>t('Fit slides to container'),
			'#default_value'=>variable_get('page_background_fit',true),
	);
	
	$form['page_background_sync']=array(
			'#type'=>'checkbox',
			'#title'=>t('Sync'),
			'#default_value'=>variable_get('page_background_sync',true),
	);

	$form['page_background_default_behavior']=array(
			'#type'=>'select',
			'#title'=>t('Behavior with default images'),
			'#options'=>array(
				'singleframe'=>t('Show one random single frame'),
				'slideshow'=>t('Show slideshow'),
			),
			'#default_value'=>variable_get('page_background_default_behavior','singleframe'),
	);

	$form['page_background_pager']=array(
			'#type'=>'checkbox',
			'#title'=>t('Show pager'),
			'#default_value'=>variable_get('page_background_pager',true),
	);
	
	$form['page_background_block']=array(
			'#type'=>'checkbox',
			'#title'=>t('Page background block'),
			'#default_value'=>variable_get('page_background_block',false),
			'#description'=>t('If enabled Page background will be available as a block and not automatically added to pages'),
	);

	$form['#validate'][]='page_background_settings_form_validate';

	return system_settings_form($form);
}

function page_background_settings_form_validate($form,&$form_state){
	if(trim($form_state['values']['page_background_container_height'])!='' && !is_numeric($form_state['values']['page_background_container_height']) && !preg_match('/%$/i',$form_state['values']['page_background_container_height'])){
		form_set_error('page_background_container_height',t('Height: Only numeric or percentage values accepted.'));
	}

	if(trim($form_state['values']['page_background_container_width'])!='' && !is_numeric($form_state['values']['page_background_container_width']) && !preg_match('/%$/i',$form_state['values']['page_background_container_width'])){
		form_set_error('page_background_container_width',t('Width: Only numeric or percentage values accepted.'));
	}

	if(!is_numeric($form_state['values']['page_background_animation_timeout']) || $form_state['values']['page_background_animation_timeout']<0 ){
		form_set_error('page_background_animation_timeout',t('Timeout: Only numeric positive values.'));
	}
}

function page_background_preprocess_html(&$variables){
	if(variable_get('page_background_block',false)==true) return;

	$out=_page_background_get_markup_by_path(drupal_is_front_page()?'<front>':$_GET['q']);

	foreach(module_implements('alter_page_background') as $module){
		$out = module_invoke($module, 'alter_page_background',$out);
	}

	if(!isset($out['#markup']) || trim($out['#markup'])=='') return;

	if(isset($out['#js']) && is_array($out['#js'])){
		foreach($out['#js'] as $elem){
			if(count($elem)==0) continue;
			if(count($elem)>1){
				drupal_add_js($elem[0],$elem[1]);
			}else drupal_add_js($elem[0]);
		}
	}
	if(isset($out['#css']) && is_array($out['#css'])){
		foreach($out['#css'] as $elem){
			if(is_string($elem)) {
				drupal_add_css($elem,'inline');
			} else if(is_array($elem) && count($elem)>1) {
				drupal_add_css($elem[0],$elem[1]);
			}else if(is_array($elem)) {
				drupal_add_css($elem[0],'inline');
			}
		}
	}

	$variables['page']['page_top']['page_background'] = $out;
}

function _page_background_get_fids_markup($fids=array()){
	$out=array();
	if(!$fids || count($fids)==0){
		$fids=_page_background_get_default_fids();
		if(count($fids)>1){
			if( variable_get('page_background_default_behavior','singleframe')=='singleframe' ){
				shuffle($fids);
				$fids=array( array_shift($fids) );
			}
		}
	}else{
		$internal_fids=array();
		
		//controllo che siano tutti oggetti
		foreach($fids as $fid){
			if(!is_object($fid) && is_numeric($fid)){
				$o=new stdClass();
				$o->fid=$fid;
				$internal_fids[]=$o;
			}else if(is_object($fid) && isset($fid->fid)){
				$internal_fids[]=$fid;
			}
		}
		if(count($internal_fids)>0) 
			$fids=$internal_fids;
	}
	
	if(count($fids)==0) 
		return array( 
			'#css' => array(),
			'#js' => array(),
			'#fids' => array(),
			'#numfids'=>0,
			'#markup' => '',
		);

	foreach($fids as $fid){
		$fid->file=file_load($fid->fid);
		if(!isset($fid->file->image_dimensions)){
			$fid->file->image_dimensions=image_get_info($fid->file->uri);
		}
	}

	$cw=variable_get('page_background_container_width','');
	$ch=variable_get('page_background_container_height','');
	$fx=variable_get('page_background_animation_effect','scrollHorz');
	$timeout=variable_get('page_background_animation_timeout',5000);
	$speed=variable_get('page_background_animation_speed',1000);
	$fit=variable_get('page_background_fit',true);
	$delay=variable_get('page_background_delay',0);
	$sync=variable_get('page_background_sync',true);
	$slide_type=variable_get('page_background_slides_type','styled_divs');
	
	if($cw==''){
		foreach($fids as $fid){
			$cw = (is_numeric($cw)&&$cw<$fid->file->image_dimensions['width'])? $cw : $fid->file->image_dimensions['width'];
		}
	}
	if($ch==''){
		foreach($fids as $fid){
			$ch= (is_numeric($ch)&&$ch<$fid->file->image_dimensions['height'])? $ch : $fid->file->image_dimensions['height'];
		}
	}

	$cw=trim($cw);
	$ch=trim($ch);

	if( variable_get('page_background_block',false)==true ) {
		$out['#css'][]='
			#page_background_container{
				height: '.$ch.((!preg_match('/%$/i',$ch))?'px':'').';
				width: '.$cw.((!preg_match('/%$/i',$cw))?'px':'').';
				overflow: hidden;
				position: relative;
			}
		';
	}else{
		$out['#css'][]='
			#page_background_container{
				height: '.$ch.((!preg_match('/%$/i',$ch))?'px':'').';
				width: '.$cw.((!preg_match('/%$/i',$cw))?'px':'').';
				overflow: hidden;
				position:absolute;
				z-index: -1;
				top: 0;
			}
		';
	}

	if($cw!='100%'){
		if(!preg_match('/%$/i',$cw)){
			$out['#css'][]='
						#page_background_container{
							left: 50%;
							margin-left: -'.round($cw/2).'px;
						}
						';
		}else{
			$percent=str_replace('%','',$cw);
			$margin=round(100-$percent)/2;
			$out['#css'][]='
						#page_background_container{
							left: '.$margin.'%;
						}
						';
		}
	}
	
	$out['#css'][]='
					.page_background_slide{
						margin: 0;
						padding: 0;
						height: '.$ch.((!preg_match('/%$/i',$ch))?'px':'').';
						width: '.$cw.((!preg_match('/%$/i',$cw))?'px':'').';
					}
					';
	
	if($slide_type=='images'){
		$out['#css'][]='
				.page_background_slide img{
					display: block;
					margin: auto;
				}
		';
	}else{
		$out['#css'][]='
				.page_background_slide .img{
					display: block;
					margin: auto;
				}
		';
	}
	
	//var_dump($fids);
	$out['#markup']='<div id="page_background_container">';
	$slides=array();
	$pager=array();
	foreach($fids as $key=>$fid){
		switch($slide_type){
			case 'images':
				$slides[]=array('#markup'=>'<div class="page_background_slide">'.theme('image',array(
					'path'=>file_create_url($fid->file->uri),
					'width'=>$fid->file->image_dimensions['width'],
					'height'=>$fid->file->image_dimensions['height'],
					'attributes'=>array('id'=>'page_background_slide_'.$key)
				)).'</div>','#fid'=>$fid);
				break;
			case 'styled_divs':
			default:
				$slides[]=array('#markup'=>'<div class="page_background_slide"><div id="page_background_slide_'.$key.'" class="img"></div></div>','#fid'=>$fid);
				$out['#css'][]='
				#page_background_slide_'.$key.'{
					background: url('.url( file_create_url($fid->file->uri), array('absolute'=>true) ).') no-repeat center top;
					width: '.$fid->file->image_dimensions['width'].'px;
					height: '.$fid->file->image_dimensions['height'].'px;
					position: absolute;top: 50%;left: 50%;
					margin-left: -'.(round($fid->file->image_dimensions['width']/2)).'px;
					margin-top: -'.(round($fid->file->image_dimensions['height']/2)).'px;
				}
				';
				break;
		}	
		$pager[]='<li class="pager_elem'.(($key==0)?' active':'').'" id="pager_element_'.$key.'">'.($key+1).'</li>';

		foreach(module_implements('alter_page_background_slide') as $module){
			$slides = module_invoke($module, 'alter_page_background_slide',$slides);
		}

	}
	if(is_array($fids) && count($fids)>0){
		if(count($fids)==1){
			//immagine statica
		}else{
			if ($cycle_path = _page_background_cycle_library_path()) {
				//slideshow
				$out['#js'][]=array($cycle_path);				
				/*$out['#css'].='
					.page_background_slide{
						margin: auto !important;
						position: relative !important;
					}
					';*/
				$out['#js'][]=array('(function($){
						$(document).ready(function(){
							$(\'#page_background_container\').not(\'.processed\').cycle({
								fx: \''.$fx.'\',
								timeout: '.$timeout.',
								speed: '.$speed.',
								fit: '.$fit.',
								delay: '.$delay.',
								sync: '.$sync.',
								pager:	\'#page_background_pager\',
								pagerAnchorBuilder: function(){}
							}).addClass(\'processed\');
						})
					})(jQuery);','inline');
			}else{
				//immagine statica. la prima
				$slides=array_slice($slides, 0,1);
			}
		}
		//$out['#markup'].=implode('',$slides);
		$markupslides = '';
		foreach($slides as $slide){
			$markupslides.=$slide['#markup'];
		}
		$out['#markup'].=$markupslides;
	}
	$out['#markup'].='</div>';
	if( count($slides)>1 && variable_get('page_background_pager',true)==true ){
		$out['#markup'].='<ul id="page_background_pager" class="pager">'.implode('',$pager).'</ul>';
	}

	$out['#fids']=$fids;
	$out['#numfids']=count($fids);
	return $out;
}


function _page_background_get_markup_by_path($path){
	global $theme_key;
	$admintheme=variable_get('admin_theme','');
	if(trim(strtolower($theme_key)) == trim(strtolower($admintheme))) return "";

	$out=array();
	$out['#markup']='';
	$out['#css']=array();

	$fids=_page_background_get_fids($path);
	$out=_page_background_get_fids_markup($fids);

	return $out;
}

function _page_background_get_fids($path='<front>'){
	return db_select('url_background_images','bg')->fields('bg')->condition('path',$path,'=')->orderBy('weight')->orderBy('created')->execute()->fetchAll();
}

function _page_background_get_default_fids(){
	return db_select('url_background_images','bg')->fields('bg')->condition('path',null,'IS')->orderBy('weight')->orderBy('created')->execute()->fetchAll();
}

/**
* Gets the path to the jQuery cycle library.
*
* @return
*   The path to the cycle library js file, or FALSE if not found.
*/
function _page_background_cycle_library_path() {
	$cycle_path = libraries_get_path('jquery.cycle');

	if (!empty($cycle_path)) {
		// Attempt to use minified version of jQuery cycle plugin.
		if (file_exists($cycle_path . '/jquery.cycle.all.min.js')) {
			$cycle_path .= '/jquery.cycle.all.min.js';
		}
		// Otherwise use non-minified version if available.
		elseif (file_exists($cycle_path . '/jquery.cycle.all.js')) {
			$cycle_path .= '/jquery.cycle.all.js';
		}
		else {
			$cycle_path = FALSE;
		}
	}
	else {
		$cycle_path = FALSE;
	}

	return $cycle_path;
}

/**
 * Implements hook_block_info().
 */
function page_background_block_info() {
  $blocks=array();
  if(variable_get('page_background_block',false)==true) {
	  $blocks['page_background_block'] = array(
	    'info' => t('Page Backgrounds Block'),
	    'cache' => DRUPAL_NO_CACHE
	  );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function page_background_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'page_background_block':
		$block['subject'] = '';

		$out=_page_background_get_markup_by_path(drupal_is_front_page()?'<front>':$_GET['q']);
		foreach(module_implements('alter_page_background') as $module){
			$out = module_invoke($module, 'alter_page_background',$out);
		}

		if(!isset($out['#markup']) || trim($out['#markup'])=='') return;

		if(isset($out['#js']) && is_array($out['#js'])){
			foreach($out['#js'] as $elem){
				if(count($elem)==0) continue;
				if(count($elem)>1){
					drupal_add_js($elem[0],$elem[1]);
				}else drupal_add_js($elem[0]);
			}
		}

		if(isset($out['#css']) && is_array($out['#css'])){
			foreach($out['#css'] as $elem){
				if(is_string($elem)) {
					drupal_add_css($elem,'inline');
				} else if(is_array($elem) && count($elem)>1) {
					drupal_add_css($elem[0],$elem[1]);
				}else if(is_array($elem)) {
					drupal_add_css($elem[0],'inline');
				}
			}
		}

		$add_css=variable_get('page_background_block_additional_css', '');
		if(trim($add_css)!='') drupal_add_css($add_css,'inline');

		$block['content'] = $out['#markup'];
      break;
    
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function page_background_block_configure($delta = '') {
  $form = array();
  if ($delta == 'page_background_block') {
    $form['page_background_block_additional_css'] = array(
      '#type' => 'textarea',
      '#title' => t('Additional css'),
      '#default_value' => variable_get('page_background_block_additional_css', ''),
    );
  }
  return $form;
}

function page_background_block_save($delta = '', $edit = array()) {
  if ($delta == 'page_background_block') {
    variable_set('page_background_block_additional_css', $edit['page_background_block_additional_css']);
  }
  return;
}